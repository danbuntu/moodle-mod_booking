{"version":3,"file":"bookit.min.js","sources":["../src/bookit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * @module     mod_booking/bookit\r\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\n\r\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\r\nimport {closeModal, closeInline} from 'mod_booking/bookingpage/prepageFooter';\r\n\r\nvar currentbookitpage = {};\r\nvar totalbookitpages = {};\r\n\r\nvar SELECTORS = {\r\n    MODALID: 'sbPrePageModal_',\r\n    INLINEID: 'sbPrePageInline_',\r\n    INMODALDIV: ' div.modalMainContent',\r\n    MODALHEADER: 'div.modalHeader',\r\n    MODALBUTTONAREA: 'div.modalButtonArea',\r\n    MODALFOOTER: 'div.modalFooter',\r\n    CONTINUEBUTTON: 'a.continue-button', // Don't want to find button right now.\r\n    BACKBUTTON: 'a.back-button', // Don't want to find button right now.\r\n    BOOKITBUTTON: 'div.booking-button-area.noprice',\r\n    INMODALBUTTON: 'div.in-modal-button',\r\n    STATICBACKDROP: 'div.modal-backdrop',\r\n};\r\n\r\n/**\r\n * Initializes the bookit button for the normal bookit function.\r\n * @param {integer} itemid\r\n * @param {string} area\r\n */\r\nexport const initbookitbutton = (itemid, area) => {\r\n\r\n    const initselector = SELECTORS.BOOKITBUTTON +\r\n    '[data-itemid]' +\r\n    '[data-area]';\r\n\r\n    if (!itemid || !area) {\r\n        const initbuttons = document.querySelectorAll(initselector);\r\n        initbuttons.forEach(button => {\r\n            const inititemid = button.dataset.itemid;\r\n            const initarea = button.dataset.area;\r\n            initbookitbutton(inititemid, initarea);\r\n        });\r\n        return;\r\n    }\r\n\r\n    const selector = SELECTORS.BOOKITBUTTON +\r\n    '[data-itemid=\"' + itemid + '\"]' +\r\n    '[data-area=\"' + area + '\"]';\r\n\r\n    const buttons = document.querySelectorAll(selector);\r\n\r\n    if (!buttons) {\r\n        return;\r\n    }\r\n\r\n    // We support more than one booking button on the same page.\r\n    buttons.forEach(button => {\r\n\r\n        if (button.dataset.nojs) {\r\n            return;\r\n        }\r\n\r\n        // We don't run code on disabled buttons.\r\n        if (button.classList.contains('disabled')) {\r\n            return;\r\n        }\r\n\r\n        if (!button.dataset.initialized) {\r\n            button.dataset.initialized = 'true';\r\n\r\n            const userid = button.dataset.userid;\r\n\r\n            button.addEventListener('click', (e) => {\r\n\r\n                // E.stopPropagation();\r\n\r\n                const data = button.dataset;\r\n\r\n                if (e.target.classList.contains('shopping-cart-cancel-button')) {\r\n\r\n                    import('local_shopping_cart/shistory')\r\n                    // eslint-disable-next-line promise/always-return\r\n                    .then(shoppingcart => {\r\n                        const confirmCancelModal = shoppingcart.confirmCancelModal;\r\n                        // Now you can use the specific function\r\n                        confirmCancelModal(button, 0);\r\n                    })\r\n                    .catch(err => {\r\n                        // Handle any errors, including if the module doesn't exist\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(err);\r\n                    });\r\n\r\n\r\n                } else if (e.target.classList.contains('btn')) {\r\n                    bookit(itemid, area, userid, data);\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Gets called from mustache template.\r\n * @param {integer} optionid\r\n * @param {integer} userid\r\n * @param {integer} totalnumberofpages\r\n * @param {string} uniquid\r\n */\r\nexport const initprepagemodal = (optionid, userid, totalnumberofpages, uniquid) => {\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('initprepagemodal', optionid, userid, totalnumberofpages, uniquid);\r\n\r\n    if (!optionid || !uniquid || !totalnumberofpages) {\r\n\r\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID);\r\n\r\n        elements.forEach(element => {\r\n\r\n            optionid = element.dataset.optionid;\r\n            uniquid = element.dataset.uniquid;\r\n            userid = element.dataset.userid;\r\n            totalnumberofpages = element.dataset.pages;\r\n            if (optionid && uniquid) {\r\n                initprepagemodal(optionid, userid, totalnumberofpages, uniquid);\r\n            }\r\n        });\r\n        return;\r\n    }\r\n\r\n    currentbookitpage[optionid] = 0;\r\n    totalbookitpages[optionid] = totalnumberofpages;\r\n\r\n    // We need to get all prepage modals on this site. Make sure they are initialized.\r\n    respondToVisibility(optionid, userid, uniquid, totalnumberofpages, loadPreBookingPage);\r\n};\r\n\r\n/**\r\n * Gets called from mustache template.\r\n * @param {integer} optionid\r\n * @param {integer} userid\r\n * @param {integer} totalnumberofpages\r\n * @param {string} uniquid\r\n */\r\nexport const initprepageinline = (optionid, userid, totalnumberofpages, uniquid) => {\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('initprepageinline', optionid, userid, totalnumberofpages, uniquid);\r\n\r\n    if (!optionid || !uniquid || !totalnumberofpages) {\r\n\r\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.INLINEID);\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log(elements);\r\n\r\n        elements.forEach(element => {\r\n            optionid = element.dataset.optionid;\r\n            uniquid = element.dataset.uniquid;\r\n            userid = element.dataset.userid;\r\n            totalnumberofpages = element.dataset.pages;\r\n            if (optionid && uniquid) {\r\n                initprepageinline(optionid, userid, totalnumberofpages, uniquid);\r\n            }\r\n        });\r\n        return;\r\n    }\r\n\r\n    currentbookitpage[optionid] = 0;\r\n    totalbookitpages[optionid] = totalnumberofpages;\r\n\r\n    // Retrieve the right button.\r\n    const buttons = document.querySelectorAll(\r\n        '[data-itemid=\"' + optionid + '\"]' +\r\n        '[data-area=\"option\"]'\r\n    );\r\n\r\n    // Add the click listener to the button.\r\n\r\n    buttons.forEach(button => {\r\n\r\n        if (button.dataset.initialized) {\r\n            return;\r\n        }\r\n\r\n        button.dataset.initialized = true;\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log('add listener to button', button, button.dataset.action);\r\n\r\n        button.addEventListener('click', e => {\r\n\r\n            // Get the row element.\r\n            let rowcontainer = e.target.closest('.row');\r\n\r\n            const transferarea = !rowcontainer.lastElementChild.classList.contains('inlineprepagearea');\r\n            // We move the inlineprepagearea only if we need to.\r\n            if (transferarea) {\r\n                let inlinediv = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\r\n\r\n                rowcontainer.append(inlinediv.closest('.inlineprepagearea'));\r\n                // Inlinediv.remove();\r\n\r\n                // We need to get all prepage modals on this site. Make sure they are initialized.\r\n                loadPreBookingPage(optionid, userid, uniquid);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * React on visibility change.\r\n * @param {integer} optionid\r\n * @param {integer} userid\r\n * @param {string} uniquid\r\n * @param {integer} totalnumberofpages\r\n * @param {function} callback\r\n */\r\nfunction respondToVisibility(optionid, userid, uniquid, totalnumberofpages, callback) {\r\n\r\n    let elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID + optionid + \"_\" + uniquid + \"]\");\r\n\r\n    elements.forEach(element => {\r\n\r\n        if (!element || element.dataset.initialized == 'true') {\r\n            return;\r\n        }\r\n\r\n        element.dataset.initialized = true;\r\n\r\n        var observer = new MutationObserver(function() {\r\n\r\n            if (!isHidden(element)) {\r\n\r\n                // Because of the modal animation, \"isHIdden\" is also true on hiding modal.\r\n                if (element.classList.contains('show')) {\r\n\r\n                    // Todo: Make sure it's not triggered on close.\r\n                    callback(optionid, userid, uniquid, totalnumberofpages);\r\n                }\r\n            }\r\n        });\r\n\r\n        // We look if we find a hidden parent. If not, we load right away.\r\n        while (element !== null) {\r\n            if (!isHidden(element)) {\r\n                element = element.parentElement;\r\n            } else {\r\n                if (element.dataset.observed) {\r\n                    return;\r\n                }\r\n\r\n                observer.observe(element, {attributes: true});\r\n                element.dataset.observed = true;\r\n                return;\r\n            }\r\n        }\r\n        callback(optionid, userid, uniquid, totalnumberofpages);\r\n    });\r\n}\r\n\r\n/**\r\n * Function to check visibility of element.\r\n * @param {*} el\r\n * @returns {boolean}\r\n */\r\nfunction isHidden(el) {\r\n    var style = window.getComputedStyle(el);\r\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\r\n}\r\n\r\n/**\r\n * Loads the (next) pre booking page.\r\n * @param {integer} optionid\r\n * @param {integer} userid\r\n * @param {string} uniquid\r\n */\r\nexport const loadPreBookingPage = (\r\n    optionid, userid = 0, uniquid = '') => {\r\n\r\n    const element = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\r\n\r\n    if (element) {\r\n        while (element.firstChild) {\r\n            element.removeChild(element.firstChild);\r\n        }\r\n    } else {\r\n        // eslint-disable-next-line no-console\r\n        console.error('didnt find element');\r\n    }\r\n\r\n    Ajax.call([{\r\n        methodname: \"mod_booking_allow_add_item_to_cart\",\r\n        args: {\r\n            'itemid': optionid,\r\n            'userid': userid,\r\n        },\r\n        done: function(response) {\r\n            // Will always be 1, if shopping cart is not installed!\r\n            if (response.success == 1) {\r\n                Ajax.call([{\r\n                    methodname: \"mod_booking_load_pre_booking_page\",\r\n                    args: {\r\n                        optionid,\r\n                        userid,\r\n                        'pagenumber': currentbookitpage[optionid],\r\n                    },\r\n                    done: function(res) {\r\n                        // If we are on the last page, we reset it to 0.\r\n                        if (currentbookitpage[optionid] === totalbookitpages[optionid] - 1) {\r\n                            currentbookitpage[optionid] = 0;\r\n                        }\r\n\r\n                        const jsonobject = JSON.parse(res.json);\r\n\r\n                        // We support more than one template, they will be seperated by comma.\r\n                        // We have a data key in the json\r\n                        const templates = res.template.split(',');\r\n                        let dataarray = jsonobject;\r\n                        // Const buttontype = res.buttontype;\r\n\r\n                        renderTemplatesOnPage(templates, dataarray, element);\r\n                    },\r\n                    fail: function(err) {\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(err);\r\n                    }\r\n                }]);\r\n            } else {\r\n\r\n                closeModal(optionid, false);\r\n                closeInline(optionid, false);\r\n\r\n                // Make sure that the prepage modal is actually closed.\r\n\r\n                import('local_shopping_cart/cart')\r\n                    // eslint-disable-next-line promise/always-return\r\n                    .then(shoppingcart => {\r\n                        const addItemShowNotification = shoppingcart.addItemShowNotification;\r\n                        // Now you can use the specific function\r\n                        response.userid = userid;\r\n                        addItemShowNotification(response);\r\n                    })\r\n                    .catch(err => {\r\n                        // Handle any errors, including if the module doesn't exist\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(err);\r\n                });\r\n            }\r\n\r\n            return true;\r\n        },\r\n        fail: function(err) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(err);\r\n        }\r\n    }]);\r\n};\r\n\r\n/**\r\n *\r\n * @param {string} templates\r\n * @param {object} dataarray\r\n * @param {HTMLElement} element\r\n */\r\nasync function renderTemplatesOnPage(templates, dataarray, element) {\r\n\r\n    const modal = element.closest('.prepage-body');\r\n\r\n    // We need to pass the id of our element to the templates to render.\r\n    // If not, we might select the wrong modal or collapsible.\r\n    let elementid = modal.id;\r\n\r\n    if (!elementid) {\r\n        const parent = modal.closest('[id]');\r\n        elementid = parent.id;\r\n    }\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log(modal, elementid);\r\n\r\n    modal.querySelector(SELECTORS.MODALHEADER).innerHTML = '';\r\n    modal.querySelector(SELECTORS.INMODALDIV).innerHTML = '';\r\n    modal.querySelector(SELECTORS.MODALBUTTONAREA).innerHTML = '';\r\n    modal.querySelector(SELECTORS.MODALFOOTER).innerHTML = '';\r\n\r\n    templates.forEach(async template => {\r\n\r\n        const data = dataarray.shift();\r\n\r\n        let targetelement = element;\r\n\r\n        if (!data) {\r\n            return true;\r\n        }\r\n\r\n        data.data.elementid = elementid;\r\n\r\n        switch (template) {\r\n            case 'mod_booking/bookingpage/header':\r\n                targetelement = modal.querySelector(SELECTORS.MODALHEADER);\r\n                break;\r\n            case 'mod_booking/bookit_button':\r\n            case 'mod_booking/bookit_price':\r\n                targetelement = modal.querySelector(SELECTORS.MODALBUTTONAREA);\r\n                break;\r\n            case 'mod_booking/bookingpage/footer':\r\n                targetelement = modal.querySelector(SELECTORS.MODALFOOTER);\r\n                break;\r\n            default:\r\n                targetelement = modal.querySelector(SELECTORS.INMODALDIV);\r\n                break;\r\n        }\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log(data.data);\r\n\r\n        await Templates.renderForPromise(template, data.data).then(({html, js}) => {\r\n\r\n            Templates.replaceNodeContents(targetelement, html, js);\r\n\r\n            return true;\r\n        }).catch(ex => {\r\n            Notification.addNotification({\r\n                message: 'failed rendering ' + JSON.stringify(ex),\r\n                type: \"danger\"\r\n            });\r\n        });\r\n        return true;\r\n    });\r\n    return true;\r\n}\r\n\r\n/**\r\n *\r\n * @param {int} itemid\r\n * @param {string} area\r\n * @param {int} userid\r\n * @param {object} data\r\n */\r\nfunction bookit(itemid, area, userid, data) {\r\n\r\n    Ajax.call([{\r\n        methodname: \"mod_booking_bookit\",\r\n        args: {\r\n            'itemid': itemid,\r\n            'area': area,\r\n            'userid': userid,\r\n            'data': JSON.stringify(data),\r\n        },\r\n        done: function(res) {\r\n\r\n            if (document.querySelector('.booking-elective-component')) {\r\n                window.location.reload();\r\n            }\r\n\r\n            const jsonarray = JSON.parse(res.json);\r\n\r\n            // We might have more than one template to render.\r\n            const templates = res.template.split(',');\r\n\r\n            // There might be more than one button area.\r\n            const buttons = document.querySelectorAll(SELECTORS.BOOKITBUTTON +\r\n                '[data-itemid=\\'' + itemid + '\\']' +\r\n                '[data-area=\\'' + area + '\\']');\r\n\r\n            const promises = [];\r\n\r\n            // We run through every button. and render the data.\r\n            buttons.forEach(button => {\r\n\r\n                // For every button, we need a new jsonarray.\r\n                const arraytoreduce = [...jsonarray];\r\n\r\n                templates.forEach(template => {\r\n\r\n                    const data = arraytoreduce.shift();\r\n\r\n                    const datatorender = data.data ?? data;\r\n\r\n                    const promise = Templates.renderForPromise(template, datatorender).then(({html, js}) => {\r\n\r\n                        Templates.replaceNode(button, html, js);\r\n\r\n                        return true;\r\n                    }).catch(ex => {\r\n                        Notification.addNotification({\r\n                            message: 'failed rendering ' + ex,\r\n                            type: \"danger\"\r\n                        });\r\n                    });\r\n\r\n                    promises.push(promise);\r\n                });\r\n            });\r\n\r\n            Promise.all(promises).then(() => {\r\n\r\n                const backdrop = document.querySelector(SELECTORS.STATICBACKDROP);\r\n\r\n                if (!backdrop) {\r\n                    reloadAllTables();\r\n                }\r\n\r\n                // The actions on successful booking are executed elsewhere.\r\n                return true;\r\n            }).catch(e => {\r\n                // eslint-disable-next-line no-console\r\n                console.log(e);\r\n            });\r\n        }\r\n    }]);\r\n}\r\n\r\n/**\r\n * We want to find out the visible modal\r\n * @param {integer} optionid\r\n * @param {string} uniquid\r\n * @param {string} appendedSelector\r\n * @returns {HTMLElement}\r\n */\r\nfunction returnVisibleElement(optionid, uniquid, appendedSelector) {\r\n\r\n    // First, we get all the possbile Elements (we don't now the unique id appended to the element.)\r\n    let selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_' + uniquid + '\"] ' + appendedSelector;\r\n    if (!uniquid || uniquid.length === 0) {\r\n        selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_\"].show ' + appendedSelector;\r\n    }\r\n\r\n    let elements = document.querySelectorAll(selector);\r\n\r\n    // If the nodelist is empty, we we mgiht use inline.\r\n    // If so, we need to have a different way of selecting elements.\r\n    if (elements.length === 0) {\r\n\r\n        selector = '[id^=\"' + SELECTORS.INLINEID + optionid + '_\"] ' + appendedSelector;\r\n        elements = document.querySelectorAll(selector);\r\n\r\n    }\r\n\r\n    let visibleElement = null;\r\n\r\n    elements.forEach(element => {\r\n\r\n        var elementtocheck = element.parentElement.parentElement;\r\n\r\n        // We look if we find a hidden parent. If not, we load right away.\r\n        while (elementtocheck !== null) {\r\n            if (!isHidden(elementtocheck)) {\r\n                elementtocheck = elementtocheck.parentElement;\r\n\r\n            } else {\r\n\r\n                break;\r\n            }\r\n        }\r\n        // If after the while, we have still an element, it's hidden.\r\n        // So we only apply visible if it's null.\r\n        if (!elementtocheck) {\r\n            visibleElement = element;\r\n        }\r\n    });\r\n\r\n    return visibleElement;\r\n}\r\n\r\n/**\r\n * Load next prepage booking page.\r\n * @param {int} optionid\r\n * @param {int} userid\r\n */\r\nexport function continueToNextPage(optionid, userid) {\r\n    if (currentbookitpage[optionid] < totalbookitpages[optionid]) {\r\n        currentbookitpage[optionid]++;\r\n        loadPreBookingPage(optionid, userid);\r\n    }\r\n}\r\n\r\n/**\r\n *  Load previous prepage booking page.\r\n * @param {int} optionid\r\n * @param {int} userid\r\n */\r\nexport function backToPreviousPage(optionid, userid) {\r\n\r\n    currentbookitpage[optionid]--;\r\n\r\n    loadPreBookingPage(optionid, userid);\r\n}\r\n\r\n/**\r\n *  Set back variables used in modal.\r\n *  @param {int} optionid\r\n */\r\nexport function setBackModalVariables(optionid) {\r\n\r\n    currentbookitpage[optionid] = 0;\r\n}\r\n"],"names":["optionid","userid","currentbookitpage","loadPreBookingPage","totalbookitpages","SELECTORS","initbookitbutton","itemid","area","initselector","document","querySelectorAll","forEach","button","inititemid","dataset","initarea","selector","buttons","nojs","classList","contains","initialized","addEventListener","e","data","target","then","shoppingcart","confirmCancelModal","catch","err","console","log","call","methodname","args","JSON","stringify","done","res","querySelector","window","location","reload","jsonarray","parse","json","templates","template","split","promises","arraytoreduce","shift","datatorender","promise","Templates","renderForPromise","_ref2","html","js","replaceNode","ex","addNotification","message","type","push","Promise","all","bookit","initprepagemodal","totalnumberofpages","uniquid","callback","element","observer","MutationObserver","isHidden","observed","observe","attributes","parentElement","respondToVisibility","pages","initprepageinline","elements","action","rowcontainer","closest","lastElementChild","inlinediv","returnVisibleElement","append","el","style","getComputedStyle","display","visibility","firstChild","removeChild","error","response","success","jsonobject","renderTemplatesOnPage","fail","addItemShowNotification","dataarray","modal","elementid","id","parent","innerHTML","async","targetelement","_ref","replaceNodeContents","appendedSelector","length","visibleElement","elementtocheck"],"mappings":"wUA6lBmCA,SAAUC,QAEzCC,kBAAkBF,YAElBG,mBAAmBH,SAAUC,8CAhBED,SAAUC,QACrCC,kBAAkBF,UAAYI,iBAAiBJ,YAC/CE,kBAAkBF,YAClBG,mBAAmBH,SAAUC,oKAoBCD,UAElCE,kBAAkBF,UAAY,iXA9kB9BE,kBAAoB,GACpBE,iBAAmB,GAEnBC,kBACS,kBADTA,mBAEU,mBAFVA,qBAGY,wBAHZA,sBAIa,kBAJbA,0BAKiB,sBALjBA,sBAMa,kBANbA,uBASc,kCATdA,yBAWgB,2BAQPC,iBAAmB,CAACC,OAAQC,cAE/BC,aAAeJ,uBAAAA,+BAIhBE,SAAWC,KAAM,aACEE,SAASC,iBAAiBF,cAClCG,SAAQC,eACVC,WAAaD,OAAOE,QAAQR,OAC5BS,SAAWH,OAAOE,QAAQP,KAChCF,iBAAiBQ,WAAYE,mBAK/BC,SAAWZ,uBACjB,iBAAmBE,OADFF,iBAEAG,KAAO,KAElBU,QAAUR,SAASC,iBAAiBM,UAErCC,SAKLA,QAAQN,SAAQC,aAERA,OAAOE,QAAQI,OAKfN,OAAOO,UAAUC,SAAS,cAIzBR,OAAOE,QAAQO,YAAa,CAC7BT,OAAOE,QAAQO,YAAc,aAEvBrB,OAASY,OAAOE,QAAQd,OAE9BY,OAAOU,iBAAiB,SAAUC,UAIxBC,KAAOZ,OAAOE,QAEhBS,EAAEE,OAAON,UAAUC,SAAS,sqBAI3BM,MAAKC,gBAGFC,EAF2BD,aAAaC,oBAErBhB,OAAQ,MAE9BiB,OAAMC,MAGHC,QAAQC,IAAIF,QAITP,EAAEE,OAAON,UAAUC,SAAS,iBA2VvCd,OAAQC,KAAMP,OAAQwB,oBAE7BS,KAAK,CAAC,CACPC,WAAY,qBACZC,KAAM,QACQ7B,YACFC,YACEP,YACFoC,KAAKC,UAAUb,OAE3Bc,KAAM,SAASC,KAEP9B,SAAS+B,cAAc,gCACvBC,OAAOC,SAASC,eAGdC,UAAYR,KAAKS,MAAMN,IAAIO,MAG3BC,UAAYR,IAAIS,SAASC,MAAM,KAG/BhC,QAAUR,SAASC,iBAAiBN,uBACtC,iBAAoBE,OADkBF,iBAEpBG,KAAO,MAEvB2C,SAAW,GAGjBjC,QAAQN,SAAQC,eAGNuC,cAAgB,IAAIP,WAE1BG,UAAUpC,SAAQqC,iBAERxB,KAAO2B,cAAcC,QAErBC,aAAe7B,KAAKA,MAAQA,KAE5B8B,QAAUC,mBAAUC,iBAAiBR,SAAUK,cAAc3B,MAAK+B,YAACC,KAACA,KAADC,GAAOA,oCAElEC,YAAYhD,OAAQ8C,KAAMC,KAE7B,KACR9B,OAAMgC,2BACQC,gBAAgB,CACzBC,QAAS,oBAAsBF,GAC/BG,KAAM,cAIdd,SAASe,KAAKX,eAItBY,QAAQC,IAAIjB,UAAUxB,MAAK,KAENjB,SAAS+B,cAAcpC,0DAOjC,KACRyB,OAAMN,IAELQ,QAAQC,IAAIT,UA9ZR6C,CAAO9D,OAAQC,KAAMP,OAAQwB,+DAcpC6C,iBAAmB,CAACtE,SAAUC,OAAQsE,mBAAoBC,cAGnExC,QAAQC,IAAI,mBAAoBjC,SAAUC,OAAQsE,mBAAoBC,SAEjExE,UAAawE,SAAYD,mBAiB9BrE,kBAAkBF,UAAY,EAC9BI,iBAAiBJ,UAAYuE,4BAuFJvE,SAAUC,OAAQuE,QAASD,mBAAoBE,UAEzD/D,SAASC,iBAAiB,QAAUN,kBAAoBL,SAAW,IAAMwE,QAAU,KAEzF5D,SAAQ8D,aAERA,SAA0C,QAA/BA,QAAQ3D,QAAQO,aAIhCoD,QAAQ3D,QAAQO,aAAc,UAE1BqD,SAAW,IAAIC,kBAAiB,WAE3BC,SAASH,UAGNA,QAAQtD,UAAUC,SAAS,SAG3BoD,SAASzE,SAAUC,OAAQuE,QAASD,uBAM7B,OAAZG,SAAkB,IAChBG,SAASH,SAEP,IACCA,QAAQ3D,QAAQ+D,uBAIpBH,SAASI,QAAQL,QAAS,CAACM,YAAY,SACvCN,QAAQ3D,QAAQ+D,UAAW,GAP3BJ,QAAUA,QAAQO,cAW1BR,SAASzE,SAAUC,OAAQuE,QAASD,wBA3HxCW,CAAoBlF,SAAUC,OAAQuE,QAASD,mBAAoBpE,yBAnB9CO,SAASC,iBAAiB,QAAUN,mBAE5CO,SAAQ8D,UAEb1E,SAAW0E,QAAQ3D,QAAQf,SAC3BwE,QAAUE,QAAQ3D,QAAQyD,QAC1BvE,OAASyE,QAAQ3D,QAAQd,OACzBsE,mBAAqBG,QAAQ3D,QAAQoE,MACjCnF,UAAYwE,SACZF,iBAAiBtE,SAAUC,OAAQsE,mBAAoBC,+DAoB1DY,kBAAoB,CAACpF,SAAUC,OAAQsE,mBAAoBC,cAGpExC,QAAQC,IAAI,oBAAqBjC,SAAUC,OAAQsE,mBAAoBC,UAElExE,WAAawE,UAAYD,mBAAoB,OAExCc,SAAW3E,SAASC,iBAAiB,QAAUN,2BAGrD2B,QAAQC,IAAIoD,eAEZA,SAASzE,SAAQ8D,UACb1E,SAAW0E,QAAQ3D,QAAQf,SAC3BwE,QAAUE,QAAQ3D,QAAQyD,QAC1BvE,OAASyE,QAAQ3D,QAAQd,OACzBsE,mBAAqBG,QAAQ3D,QAAQoE,MACjCnF,UAAYwE,SACZY,kBAAkBpF,SAAUC,OAAQsE,mBAAoBC,YAMpEtE,kBAAkBF,UAAY,EAC9BI,iBAAiBJ,UAAYuE,mBAGb7D,SAASC,iBACrB,iBAAmBX,SAAnB,0BAMIY,SAAQC,SAERA,OAAOE,QAAQO,cAInBT,OAAOE,QAAQO,aAAc,EAG7BU,QAAQC,IAAI,yBAA0BpB,OAAQA,OAAOE,QAAQuE,QAE7DzE,OAAOU,iBAAiB,SAASC,QAGzB+D,aAAe/D,EAAEE,OAAO8D,QAAQ,YAEdD,aAAaE,iBAAiBrE,UAAUC,SAAS,qBAErD,KACVqE,UAAYC,qBAAqB3F,SAAUwE,QAASnE,sBAExDkF,aAAaK,OAAOF,UAAUF,QAAQ,uBAItCrF,mBAAmBH,SAAUC,OAAQuE,2BA8D5CK,SAASgB,QACVC,MAAQpD,OAAOqD,iBAAiBF,UACT,SAAlBC,MAAME,SAA6C,WAArBF,MAAMG,8DASpC9F,mBAAqB,SAC9BH,cAAUC,8DAAS,EAAGuE,+DAAU,SAE1BE,QAAUiB,qBAAqB3F,SAAUwE,QAASnE,yBAEpDqE,aACOA,QAAQwB,YACXxB,QAAQyB,YAAYzB,QAAQwB,iBAIhClE,QAAQoE,MAAM,oCAGblE,KAAK,CAAC,CACPC,WAAY,qCACZC,KAAM,QACQpC,gBACAC,QAEdsC,KAAM,SAAS8D,iBAEa,GAApBA,SAASC,sBACJpE,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CACFpC,SAAAA,SACAC,OAAAA,kBACcC,kBAAkBF,WAEpCuC,KAAM,SAASC,KAEPtC,kBAAkBF,YAAcI,iBAAiBJ,UAAY,IAC7DE,kBAAkBF,UAAY,SAG5BuG,WAAalE,KAAKS,MAAMN,IAAIO,MAQlCyD,sBAJkBhE,IAAIS,SAASC,MAAM,KACrBqD,WAG4B7B,UAEhD+B,KAAM,SAAS1E,KAEXC,QAAQC,IAAIF,wCAKT/B,UAAU,kCACTA,UAAU,8nBAMjB2B,MAAKC,qBACI8E,wBAA0B9E,aAAa8E,wBAE7CL,SAASpG,OAASA,OAClByG,wBAAwBL,aAE3BvE,OAAMC,MAGHC,QAAQC,IAAIF,UAIjB,GAEX0E,KAAM,SAAS1E,KAEXC,QAAQC,IAAIF,yBAWTyE,sBAAsBxD,UAAW2D,UAAWjC,eAEjDkC,MAAQlC,QAAQc,QAAQ,qBAI1BqB,UAAYD,MAAME,OAEjBD,UAAW,OACNE,OAASH,MAAMpB,QAAQ,QAC7BqB,UAAYE,OAAOD,UAIvB9E,QAAQC,IAAI2E,MAAOC,WAEnBD,MAAMnE,cAAcpC,uBAAuB2G,UAAY,GACvDJ,MAAMnE,cAAcpC,sBAAsB2G,UAAY,GACtDJ,MAAMnE,cAAcpC,2BAA2B2G,UAAY,GAC3DJ,MAAMnE,cAAcpC,uBAAuB2G,UAAY,GAEvDhE,UAAUpC,SAAQqG,MAAAA,iBAERxF,KAAOkF,UAAUtD,YAEnB6D,cAAgBxC,YAEfjD,YACM,SAGXA,KAAKA,KAAKoF,UAAYA,UAEd5D,cACC,iCACDiE,cAAgBN,MAAMnE,cAAcpC,iCAEnC,gCACA,2BACD6G,cAAgBN,MAAMnE,cAAcpC,qCAEnC,iCACD6G,cAAgBN,MAAMnE,cAAcpC,qCAGpC6G,cAAgBN,MAAMnE,cAAcpC,6BAK5C2B,QAAQC,IAAIR,KAAKA,YAEX+B,mBAAUC,iBAAiBR,SAAUxB,KAAKA,MAAME,MAAKwF,WAACxD,KAACA,KAADC,GAAOA,mCAErDwD,oBAAoBF,cAAevD,KAAMC,KAE5C,KACR9B,OAAMgC,2BACQC,gBAAgB,CACzBC,QAAS,oBAAsB3B,KAAKC,UAAUwB,IAC9CG,KAAM,eAGP,MAEJ,WA2FF0B,qBAAqB3F,SAAUwE,QAAS6C,sBAGzCpG,SAAW,SAAWZ,kBAAoBL,SAAW,IAAMwE,QAAU,MAAQ6C,iBAC5E7C,SAA8B,IAAnBA,QAAQ8C,SACpBrG,SAAW,SAAWZ,kBAAoBL,SAAW,YAAcqH,sBAGnEhC,SAAW3E,SAASC,iBAAiBM,UAIjB,IAApBoE,SAASiC,SAETrG,SAAW,SAAWZ,mBAAqBL,SAAW,OAASqH,iBAC/DhC,SAAW3E,SAASC,iBAAiBM,eAIrCsG,eAAiB,YAErBlC,SAASzE,SAAQ8D,kBAET8C,eAAiB9C,QAAQO,cAAcA,cAGjB,OAAnBuC,iBACE3C,SAAS2C,iBACVA,eAAiBA,eAAevC,cASnCuC,iBACDD,eAAiB7C,YAIlB6C"}