{"version":3,"file":"dynamicrulesform.min.js","sources":["../src/dynamicrulesform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * @package    mod_booking\r\n * @author     Bernhard Fischer\r\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/**\r\n * Dynamic semesters form.\r\n *\r\n * @module     mod_booking/dynamicsemestersform\r\n * @copyright  2022 Wunderbyte GmbH\r\n * @author     Georg MaiÃŸer\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {get_string as getString} from 'core/str';\r\nimport ModalForm from 'core_form/modalform';\r\n\r\nexport const init = (selector) => {\r\n\r\n    const element = document.querySelector(selector);\r\n\r\n    element.addEventListener('click', e => {\r\n\r\n        editRulesModal(e.target);\r\n\r\n    });\r\n};\r\n\r\n/**\r\n *  Function to show modal elemnt.\r\n * @param {HTMLElement} element\r\n */\r\nfunction editRulesModal(element) {\r\n\r\n    if (!element) {\r\n        return;\r\n    }\r\n\r\n    const ruleid = element.dataset.id;\r\n    const name = element.dataset.name;\r\n    const action = element.dataset.action;\r\n    const contextid = element.dataset.contextid;\r\n\r\n    if (!ruleid) {\r\n        return;\r\n    }\r\n\r\n    if (action == \"delete\") {\r\n        // A rule is deleted.\r\n        const deleteForm = new ModalForm({\r\n\r\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\r\n            formClass: \"mod_booking\\\\form\\\\deleteruleform\",\r\n            // Add as many arguments as you need, they will be passed to the form:\r\n            args: {id: ruleid, name: name},\r\n            // Pass any configuration settings to the modal dialogue, for example, the title:\r\n            modalConfig: {\r\n                title: getString('deletebookingrule', 'mod_booking')\r\n            },\r\n            // DOM element that should get the focus after the modal dialogue is closed:\r\n            returnFocus: element\r\n        });\r\n\r\n        // After submitting we want to reload the window to update the rule list.\r\n        deleteForm.addEventListener(deleteForm.events.FORM_SUBMITTED, () => {\r\n            window.location.reload();\r\n        });\r\n\r\n        // Show the form.\r\n        deleteForm.show();\r\n\r\n    } else if (action == \"edit-or-new\") {\r\n        // A rule is added (ruleid == 0) or edited (ruleid > 0).\r\n        const modalForm = new ModalForm({\r\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\r\n            formClass: \"mod_booking\\\\form\\\\rulesform\",\r\n            // Add as many arguments as you need, they will be passed to the form:\r\n            args: {\r\n                id: ruleid,\r\n                contextid: contextid\r\n            },\r\n            // Pass any configuration settings to the modal dialogue, for example, the title:\r\n            modalConfig: {title: getString('editrule', 'mod_booking')},\r\n            // DOM element that should get the focus after the modal dialogue is closed:\r\n            returnFocus: element\r\n        });\r\n\r\n        // Listen to events if you want to execute something on form submit.\r\n        // Event detail will contain everything the process() function returned:\r\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\r\n\r\n            // After adding or editing, we want to reload the window to update the rule list.\r\n            window.location.reload();\r\n        });\r\n\r\n        // We need to add an event listener for the change of the rule, action, and condition select.\r\n        modalForm.addEventListener('change', (e) => {\r\n            if (!e.target.name) {\r\n                return;\r\n            }\r\n\r\n            if (e.target.name == 'bookingruletype') {\r\n                window.skipClientValidation = true;\r\n                let button = document.querySelector('[name=\"btn_bookingruletype\"]');\r\n                modalForm.processNoSubmitButton(button);\r\n            }\r\n\r\n            if (e.target.name == 'rule_react_on_event_event') {\r\n                window.skipClientValidation = true;\r\n                let button = document.querySelector('[name=\"btn_bookingruletype\"]');\r\n                modalForm.processNoSubmitButton(button);\r\n            }\r\n\r\n            if (e.target.name == 'bookingruleconditiontype') {\r\n                window.skipClientValidation = true;\r\n                let button = document.querySelector('[name=\"btn_bookingruleconditiontype\"]');\r\n                modalForm.processNoSubmitButton(button);\r\n            }\r\n\r\n            if (e.target.name == 'bookingruleactiontype') {\r\n                window.skipClientValidation = true;\r\n                let button = document.querySelector('[name=\"btn_bookingruleactiontype\"]');\r\n                modalForm.processNoSubmitButton(button);\r\n            }\r\n        });\r\n\r\n        // Show the form.\r\n        modalForm.show();\r\n    } else {\r\n        // eslint-disable-next-line no-console\r\n        console.log('Error in dynamicrulesform.js: action should be \"delete\" or \"edit-or-new\".');\r\n        return;\r\n    }\r\n}\r\n"],"names":["selector","document","querySelector","addEventListener","e","element","ruleid","dataset","id","name","action","contextid","deleteForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","window","location","reload","show","console","log","modalForm","target","skipClientValidation","button","processNoSubmitButton","editRulesModal"],"mappings":";;;;;;;;;;;;;;8JAkCqBA,WAEDC,SAASC,cAAcF,UAE/BG,iBAAiB,SAASC,cAWdC,aAEfA,qBAICC,OAASD,QAAQE,QAAQC,GACzBC,KAAOJ,QAAQE,QAAQE,KACvBC,OAASL,QAAQE,QAAQG,OACzBC,UAAYN,QAAQE,QAAQI,cAE7BL,iBAIS,UAAVI,OAAoB,OAEdE,WAAa,IAAIC,mBAAU,CAG7BC,UAAW,oCAEXC,KAAM,CAACP,GAAIF,OAAQG,KAAMA,MAEzBO,YAAa,CACTC,OAAO,mBAAU,oBAAqB,gBAG1CC,YAAab,UAIjBO,WAAWT,iBAAiBS,WAAWO,OAAOC,gBAAgB,KAC1DC,OAAOC,SAASC,YAIpBX,WAAWY,WAER,CAAA,GAAc,eAAVd,mBA2DPe,QAAQC,IAAI,6EA3DoB,OAE1BC,UAAY,IAAId,mBAAU,CAE5BC,UAAW,+BAEXC,KAAM,CACFP,GAAIF,OACJK,UAAWA,WAGfK,YAAa,CAACC,OAAO,mBAAU,WAAY,gBAE3CC,YAAab,UAKjBsB,UAAUxB,iBAAiBwB,UAAUR,OAAOC,gBAAgB,KAGxDC,OAAOC,SAASC,YAIpBI,UAAUxB,iBAAiB,UAAWC,OAC7BA,EAAEwB,OAAOnB,SAIO,mBAAjBL,EAAEwB,OAAOnB,KAA2B,CACpCY,OAAOQ,sBAAuB,MAC1BC,OAAS7B,SAASC,cAAc,gCACpCyB,UAAUI,sBAAsBD,WAGf,6BAAjB1B,EAAEwB,OAAOnB,KAAqC,CAC9CY,OAAOQ,sBAAuB,MAC1BC,OAAS7B,SAASC,cAAc,gCACpCyB,UAAUI,sBAAsBD,WAGf,4BAAjB1B,EAAEwB,OAAOnB,KAAoC,CAC7CY,OAAOQ,sBAAuB,MAC1BC,OAAS7B,SAASC,cAAc,yCACpCyB,UAAUI,sBAAsBD,WAGf,yBAAjB1B,EAAEwB,OAAOnB,KAAiC,CAC1CY,OAAOQ,sBAAuB,MAC1BC,OAAS7B,SAASC,cAAc,sCACpCyB,UAAUI,sBAAsBD,aAKxCH,UAAUH,SAxGVQ,CAAe5B,EAAEwB"}